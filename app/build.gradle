plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.jaredsburrows.spoon'
}

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.abnamro.apps.referenceandroid"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "io.qameta.allure.android.runners.AllureAndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'com.google.android.material:material:1.4.0'

    androidTestImplementation "io.qameta.allure:allure-kotlin-model:$rootProject.allureVersion"
    androidTestImplementation "io.qameta.allure:allure-kotlin-commons:$rootProject.allureVersion"
    androidTestImplementation "io.qameta.allure:allure-kotlin-junit4:$rootProject.allureVersion"
    androidTestImplementation "io.qameta.allure:allure-kotlin-android:$rootProject.allureVersion"

    androidTestImplementation 'androidx.test.ext:junit:' + rootProject.extJUnitVersion
    androidTestImplementation 'androidx.test:core-ktx:' + rootProject.coreVersion
    androidTestImplementation 'androidx.test.ext:junit-ktx:' + rootProject.extJUnitVersion
    androidTestImplementation 'androidx.test.espresso:espresso-core:' + rootProject.espressoCore
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
}

task runInstrumentationTests {
    group "verification"
    mustRunAfter "deleteExistingAllureReports"
    dependsOn "deleteExistingAllureReports", ":downloadAllure", "spoonDebugAndroidTest"
    finalizedBy "downloadAllureReports"
}

/*
 * Downloads all Allure reports from the connected device.
 */

task downloadAllureReports {
    group "Verification"
    mustRunAfter "spoonDebugAndroidTest"
    description "Downloads Allure report files from the connected device"
    finalizedBy "uninstallAll"
    doLast {
        def deviceSourcePath = getAllureDevicePath()
        def localReportPath = new File(rootProject.buildDir, "")
        if (!localReportPath.exists()) {
            localReportPath.mkdirs()
        }
        if (!localReportPath.exists()) {
            throw new GradleException("Could not create $localReportPath")
        }
        def adb = getAdbPath()
        exec {
            commandLine adb, 'pull', "$deviceSourcePath", localReportPath
        }
    }
}


spoon {
    debug = true
    singleInstrumentationCall = true
    grantAll = true
    shard = true
    ignoreFailures = true
}


/**
 * Deletes existing Allure reports on the device.
 */
task deleteExistingAllureReports {
    group "Verification"
    description "Removes the Allure report files from the connected device"
    doLast {
        def output2 = executeAdb('rm -r ' + getAllureDevicePath())
        println output2
        spoonDebugAndroidTest.finalizedBy downloadAllureReports
    }
}

// ==================================================================
// Utility methods
// ==================================================================

/**
 * Utility method to get the full ADB path
 * @return the absolute ADB path
 */
String getAdbPath() {
    def adb = android.getAdbExecutable().toString()
    if (adb.isEmpty()) {
        throw GradleException("Could not detect adb path")
    }
    return adb
}

/**
 * Sometime adb returns '\r' character multiple times.
 * @param s the original string returned by adb
 * @return the fixed string without '\r'
 */
static def fixAdbOutput(String s) {
    return s.replaceAll("[\r\n]+", "\n").trim()
}

/**
 * Runs the adb tool
 * @param program the program which is executed on the connected device
 * @return the output of the adb tool
 */
def executeAdb(String program) {
    def process = new ProcessBuilder(getAdbPath(), "shell", program).redirectErrorStream(true).start()
    String text = new BufferedReader(new InputStreamReader(process.inputStream)).text
    return fixAdbOutput(text)
}

/**
 * The path which is used to store the Allure files.
 * @return hardcoded path to results
 */
static def getAllureDevicePath() {
    return '/storage/self/primary/allure-results'
}
